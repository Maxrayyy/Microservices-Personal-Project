import getScriptAsync from './getScriptAsync';

/** @format */
const DEFAULT_PLUGINS_SOURCE_LINK = {
    Mapvgl: 'https://unpkg.com/mapvgl/dist/mapvgl.min.js',
    MapvglThreeLayers: 'https://unpkg.com/mapvgl/dist/mapvgl.threelayers.min.js',
    Mapv: 'https://unpkg.com/mapv/build/mapv.min.js',
    MapvThree: 'https://unpkg.com/mapv-three/dist/mapvthree.umd.js',
    TrackAnimation: 'https://mapopen.bj.bcebos.com/github/BMapGLLib/TrackAnimation/src/TrackAnimation.min.js',
    DrawingManager: 'https://mapopen.bj.bcebos.com/github/BMapGLLib/DrawingManager/src/DrawingManager.min.js',
    DistanceTool: 'https://mapopen.bj.bcebos.com/github/BMapGLLib/DistanceTool/src/DistanceTool.min.js',
    GeoUtils: 'https://mapopen.bj.bcebos.com/github/BMapGLLib/GeoUtils/src/GeoUtils.min.js',
    AreaRestriction: 'https://mapopen.bj.bcebos.com/github/BMapGLLib/AreaRestriction/src/AreaRestriction.min.js',
    InfoBox: 'https://mapopen.bj.bcebos.com/github/BMapGLLib/InfoBox/src/InfoBox.min.js',
    RichMarker: 'https://bj.bcebos.com/v1/mapopen/github/BMapGLLib/RichMarker/src/RichMarker.min.js',
    LuShu: 'https://bj.bcebos.com/v1/mapopen/github/BMapGLLib/Lushu/src/Lushu.min.js'
};
const pluginLoaderMap = {
    TrackAnimation: (customSourceLink) => getScriptAsync({
        src: customSourceLink || DEFAULT_PLUGINS_SOURCE_LINK['TrackAnimation'],
        key: 'trackAnimation',
        exportGetter: () => window.BMapGLLib.TrackAnimation
    }),
    DrawingManager: (customSourceLink) => getScriptAsync({
        src: customSourceLink || DEFAULT_PLUGINS_SOURCE_LINK['DrawingManager'],
        key: 'DrawingManager',
        exportGetter: () => window.BMapGLLib.DrawingManager
    }),
    DistanceTool: (customSourceLink) => getScriptAsync({
        src: customSourceLink || DEFAULT_PLUGINS_SOURCE_LINK['DistanceTool'],
        key: 'DistanceTool',
        exportGetter: () => window.BMapGLLib.DistanceTool
    }),
    GeoUtils: (customSourceLink) => getScriptAsync({
        src: customSourceLink || DEFAULT_PLUGINS_SOURCE_LINK['GeoUtils'],
        key: 'GeoUtils',
        exportGetter: () => window.BMapGLLib.GeoUtils
    }),
    RichMarker: (customSourceLink) => getScriptAsync({
        src: customSourceLink || DEFAULT_PLUGINS_SOURCE_LINK['RichMarker'],
        key: 'RichMarker',
        exportGetter: () => window.BMapGLLib.RichMarker
    }),
    AreaRestriction: (customSourceLink) => getScriptAsync({
        src: customSourceLink || DEFAULT_PLUGINS_SOURCE_LINK['AreaRestriction'],
        key: 'AreaRestriction',
        exportGetter: () => window.BMapGLLib.AreaRestriction
    }),
    InfoBox: (customSourceLink) => getScriptAsync({
        src: customSourceLink || DEFAULT_PLUGINS_SOURCE_LINK['InfoBox'],
        key: 'InfoBox',
        exportGetter: () => window.BMapGLLib.InfoBox
    }),
    LuShu: (customSourceLink) => getScriptAsync({
        src: customSourceLink || DEFAULT_PLUGINS_SOURCE_LINK['Lushu'],
        key: 'Lushu',
        exportGetter: () => window.BMapGLLib.LuShu
    }),
    Mapvgl: (customSourceLink) => getScriptAsync({
        src: customSourceLink || DEFAULT_PLUGINS_SOURCE_LINK['Mapvgl'],
        key: 'Mapvgl',
        exportGetter: () => window.mapvgl
    }),
    MapvglThreeLayers: (customSourceLink) => getScriptAsync({
        src: customSourceLink || DEFAULT_PLUGINS_SOURCE_LINK['MapvglThreeLayers'],
        key: 'MapvglThreeLayers',
        exportGetter: () => window.mapvglThreeLayers
    }),
    Mapv: (customSourceLink) => getScriptAsync({
        src: customSourceLink || DEFAULT_PLUGINS_SOURCE_LINK['Mapv'],
        key: 'Mapv',
        exportGetter: () => window.mapv
    }),
    MapvThree: (customSourceLink) => getScriptAsync({
        src: customSourceLink || DEFAULT_PLUGINS_SOURCE_LINK['MapvThree'],
        key: 'MapvThree',
        exportGetter: () => window.mapvthree
    })
};
function initPlugins(plugins, customPluginSourceLink = {}) {
    // 都处理成 () => promise
    const pluginsLoaders = [...new Set(plugins)].reduce((pluginsLoaderArr, pluginsKey) => {
        let plugin;
        if (typeof pluginsKey === 'string' && (plugin = pluginLoaderMap[pluginsKey])) {
            pluginsLoaderArr.push(plugin(customPluginSourceLink[pluginsKey]));
        }
        else if (typeof pluginsKey === 'function') {
            pluginsLoaderArr.push(pluginsKey());
        }
        return pluginsLoaderArr;
    }, []);
    // 加载插件
    return Promise.all(pluginsLoaders).then((res) => {
        const returnValue = {};
        res.forEach((item) => {
            Object.assign(returnValue, item);
        });
        return returnValue;
    });
}

export { DEFAULT_PLUGINS_SOURCE_LINK, initPlugins, pluginLoaderMap };
